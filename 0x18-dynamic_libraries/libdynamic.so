#include "main.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int _putchar(char c) {
    return putchar(c); 
}

int _islower(int c) {
    return (c >= 'a' && c <= 'z');
}

int _isalpha(int c) {
    return ((_islower(c) || _isupper(c)) != 0);
}

int _abs(int n) {
    return (n < 0 ? -n : n);
}

int _isupper(int c) {
    return (c >= 'A' && c <= 'Z'); 
}
     
int _isdigit(int c) {
    return (c >= '0' && c <= '9');
}

int _strlen(char *s) {
    int len = 0;
    while (*s++)
        len++;
    return len;
}

void _puts(char *s) {
    while (*s) 
        _putchar(*s++);
    _putchar('\n');
}

char *_strcpy(char *dest, char *src) {
    int i = -1;
    do {
        dest[++i] = src[i];
    } while (src[i] != '\0');

    return dest;
}

int _atoi(char *s) {
    int num = 0;
    int sign = 1;
    if (*s == '-') {
        sign = -1;
        s++;
    }
    while (*s) {
        num = num * 10 + (*s - '0');
        s++;
    }
    return sign * num;
}

char *_strcat(char *dest, char *src) {
    int len = _strlen(dest);
    int i;
    for (i = 0; src[i] != '\0'; i++) {
        dest[len + i] = src[i]; 
    }
    dest[len + i] = '\0';
    return dest;  
}

char *_strncat(char *dest, char *src, int n) {
    int len = _strlen(dest);
    int i;
    for (i = 0; i < n && src[i] != '\0'; i++) {
        dest[len + i] = src[i];
    }
    dest[len + i] = '\0'; 
    return dest;
}


char *_strncpy(char *dest, char *src, int n) {
    int i;
    for (i = 0; i < n && src[i] != '\0'; i++) {
        dest[i] = src[i]; 
    }
    while (i < n) {
        dest[i++] = '\0'; 
    }
    return dest; 
}

int _strcmp(char *s1, char *s2) {
    while(*s1 && *s1 == *s2) {
        s1++;
        s2++;
    }
    return *(unsigned char*)s1 - *(unsigned char*)s2; 
}

char *_memset(char *s, char b, unsigned int n) {
    unsigned int i;
    for (i = 0; i < n; i++) {
        s[i] = b;
    }
    return s;
}

char *_memcpy(char *dest, char *src, unsigned int n) {
    unsigned int i;
    for (i = 0; i < n; i++) {
        dest[i] = src[i]; 
    }
    return dest;
}

char *_strchr(char *s, char c) {
  while(*s != '\0') {
    if(*s == c) {
        return s;
    }
    s++;
  }
  if(c == '\0') {
    return s; 
  }
  return NULL;
}

unsigned int _strspn(char *s, char *accept) {
  unsigned int count = 0;
  char *p;
  while(*s) {
    for(p = accept; *p != '\0'; p++) {
      if(*s == *p) {
        break;
      } 
    }
    if(*p == '\0') {
      return count;
    }
    count++;
    s++;
  }
  return count;
}

char *_strpbrk(char *s, char *accept) {
  while (*s != '\0') {
    char *a = accept;
    while (*a != '\0') {
      if (*s == *a) {
        return s;  
      }
      a++;
    }
    s++;
  }
  return NULL;
}

char *_strstr(char *haystack, char *needle) {
  int needle_len = _strlen(needle);
  int haystack_len = _strlen(haystack);

  if (needle_len > haystack_len) {
    return NULL;
  }

  int i;
  for (i = 0; i <= haystack_len - needle_len; i++) {
    int j; 
    for (j = 0; j < needle_len; j++) {
      if (haystack[i + j] != needle[j]) {
        break;
      }
    }  
    if (j == needle_len) { 
      return haystack + i; 
    }  
  }    
  return NULL; 
}
